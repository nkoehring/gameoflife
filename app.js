// Generated by CoffeeScript 1.7.1
(function() {
  var GameOfLife;

  GameOfLife = (function() {
    function GameOfLife(node_id, size) {
      this.node_id = node_id;
      this.size = size;
      this.node = document.getElementById(this.node_id);
      this.calculateCellSize();
      if (!this.node) {
        this.createNode();
      }
      this.createGrid();
      this.randomPattern();
      this.run();
    }

    GameOfLife.prototype.createNode = function() {
      this.node = document.createElement("table");
      return document.body.appendChild(this.node);
    };

    GameOfLife.prototype.createGrid = function() {
      var c, cell, r, row, _i, _ref, _results;
      _results = [];
      for (r = _i = 0, _ref = this.size; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
        row = document.createElement("tr");
        this.node.appendChild(row);
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (c = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
            cell = document.createElement("td");
            cell.id = "r" + r + "c" + c;
            cell.style.width = "" + this.cellSize + "px";
            cell.style.height = "" + this.cellSize + "px";
            _results1.push(row.appendChild(cell));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.calculateCellSize = function() {
      return this.cellSize = Math.floor(window.innerWidth / this.size / 2);
    };

    GameOfLife.prototype.getCell = function(r, c) {
      return document.getElementById("r" + r + "c" + c);
    };

    GameOfLife.prototype.bear = function(r, c) {
      return this.getCell(r, c).className = "alive";
    };

    GameOfLife.prototype.kill = function(r, c) {
      return this.getCell(r, c).className = "";
    };

    GameOfLife.prototype.randomPattern = function() {
      var c, i, r, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.size * 5; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        r = Math.round(Math.random() * this.size);
        c = Math.round(Math.random() * this.size);
        _results.push(this.bear(r, c));
      }
      return _results;
    };

    GameOfLife.prototype.countLivingNeighbours = function(r, c, highlight) {
      var above, below, cell, livingNeighbours, middle, next, prev, _i, _len, _ref;
      above = this.getCell(r - 1, c);
      middle = this.getCell(r, c);
      below = this.getCell(r + 1, c);
      livingNeighbours = 0;
      _ref = [above, middle, below];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        if (!cell) {
          continue;
        }
        prev = cell.previousSibling;
        next = cell.nextSibling;
        if (prev && prev.className === "alive") {
          livingNeighbours += 1;
        }
        if (cell.className === "alive" && cell !== middle) {
          livingNeighbours += 1;
        }
        if (next && next.className === "alive") {
          livingNeighbours += 1;
        }
      }
      return livingNeighbours;
    };

    GameOfLife.prototype.destiny = function(r, c) {
      switch (this.countLivingNeighbours(r, c)) {
        case 3:
          return this.bear(r, c);
        case 0:
        case 1:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          return this.kill(r, c);
      }
    };

    GameOfLife.prototype.tick = function() {
      var c, r, _i, _ref, _results;
      console.log("tick");
      _results = [];
      for (r = _i = 0, _ref = this.size; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (c = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.destiny(r, c));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.run = function() {
      var fn;
      fn = this.run.bind(this);
      this.tick();
      return setTimeout(fn, 500);
    };

    return GameOfLife;

  })();

  window.GameOfLife = GameOfLife;

}).call(this);
